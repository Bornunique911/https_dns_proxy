#!/bin/bash

case $1 in
  config)
    cat <<'EOM'
multigraph https_dns_proxy_count
graph_title HTTPS DNS proxy - count
graph_vlabel count
graph_category network
graph_scale no
graph_args --base 1000 --lower-limit 0
requests.label Requests
responses.label Responses

multigraph https_dns_proxy_latency
graph_title HTTPS DNS proxy - latency
graph_vlabel latency
graph_category network
graph_scale no
graph_args --base 1000 --lower-limit 0
latency.label Latency

multigraph https_dns_proxy_connections
graph_title HTTPS DNS proxy - connections
graph_vlabel count
graph_category network
graph_scale no
graph_args --base 1000 --lower-limit 0
opened.label Opened
closed.label Closed
reused.label Reused
EOM
    exit 0;;

  autoconf)
    pgrep https_dns_proxy >/dev/null 2>&1 \
      && echo "yes" \
      || echo "no"
    exit 0;;
esac

log_lines=$(journalctl --unit https_dns_proxy.service --output cat --since '6 minutes ago')
pattern='stat\.c:[0-9]+ ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+) ([0-9]+)$'

# match log lines with pattern (last match will be used)
IFS='
'
for line in $log_lines; do
  if [[ ! $line =~ $pattern ]]; then
    echo "stat regexp did not match with line: $line" >&2
  fi
done

latency='U'
if [ -n ${BASH_REMATCH[3]} ] && \
   [ -n ${BASH_REMATCH[2]} ] && \
   [ ${BASH_REMATCH[2]} -gt 0 ]; then
  latency=$((${BASH_REMATCH[3]} / ${BASH_REMATCH[2]}))
fi

echo "multigraph https_dns_proxy_count"
echo "requests.value ${BASH_REMATCH[1]:-U}"
echo "responses.value ${BASH_REMATCH[2]:-U}"
echo "multigraph https_dns_proxy_latency"
echo "latency.value ${latency}"
echo "multigraph https_dns_proxy_connections"
echo "opened.value ${BASH_REMATCH[6]:-U}"
echo "closed.value ${BASH_REMATCH[7]:-U}"
echo "reused.value ${BASH_REMATCH[8]:-U}"
